{"ast":null,"code":"import Stripe from \"stripe\";\nimport uuidv4 from \"uuid/v4\";\nimport jwt from \"jsonwebtoken\";\nimport Cart from \"../../models/Cart\";\nimport Product from \"../../models/Product\";\nimport Order from \"../../models/Order\";\nimport calculateCartTotal from \"../../utils/calculateCartTotal\";\nconst stripe = Stripe(process.env.STRIPE_SECRET_KEY);\nexport default (async (req, res) => {\n  const {\n    paymentData\n  } = req.body;\n\n  try {\n    // 1) Verify and get user id from token\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET); // 2) Find cart based on user id, populate it\n\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\",\n      model: Product\n    }); // 3) Calculate cart totals again from cart products\n\n    const {\n      cartTotal,\n      stripeTotal\n    } = calculateCartTotal(cart.products); // 4) Get email from payment data, see if email linked with existing Stripe customer\n\n    const prevCustomer = await stripe.customers.list({\n      email: paymentData.email,\n      limit: 1\n    });\n    const isExistingCustomer = prevCustomer.data.length > 0; // 5) If not existing customer, create them based on their email\n\n    let newCustomer;\n\n    if (!isExistingCustomer) {\n      newCustomer = await stripe.customers.create({\n        email: paymentData.email,\n        source: paymentData.id\n      });\n    }\n\n    const customer = isExistingCustomer && prevCustomer.data[0].id || newCustomer.id; // 6) Create charge with total, send receipt email\n\n    const charge = await stripe.charges.create({\n      currency: \"usd\",\n      amount: stripeTotal,\n      receipt_email: paymentData.email,\n      customer,\n      description: `Checkout | ${paymentData.email} | ${paymentData.id}`\n    }, {\n      idempotency_key: uuidv4()\n    }); // 7) Add order data to database\n\n    await new Order({\n      user: userId,\n      email: paymentData.email,\n      total: cartTotal,\n      products: cart.products\n    }).save(); // 8) Clear products in cart\n\n    await Cart.findOneAndUpdate({\n      _id: cart._id\n    }, {\n      $set: {\n        products: []\n      }\n    }); // 9) Send back success (200) response\n\n    res.status(200).send(\"Checkout successful\");\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error processing charge\");\n  }\n});","map":{"version":3,"sources":["C:\\Users\\Gebruiker\\Desktop\\e-commerce\\pages\\api\\checkout.js"],"names":["Stripe","uuidv4","jwt","Cart","Product","Order","calculateCartTotal","stripe","process","env","STRIPE_SECRET_KEY","req","res","paymentData","body","userId","verify","headers","authorization","JWT_SECRET","cart","findOne","user","populate","path","model","cartTotal","stripeTotal","products","prevCustomer","customers","list","email","limit","isExistingCustomer","data","length","newCustomer","create","source","id","customer","charge","charges","currency","amount","receipt_email","description","idempotency_key","total","save","findOneAndUpdate","_id","$set","status","send","error","console"],"mappings":"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","sourcesContent":["import Stripe from \"stripe\";\nimport uuidv4 from \"uuid/v4\";\nimport jwt from \"jsonwebtoken\";\nimport Cart from \"../../models/Cart\";\nimport Product from \"../../models/Product\";\nimport Order from \"../../models/Order\";\nimport calculateCartTotal from \"../../utils/calculateCartTotal\";\n\nconst stripe = Stripe(process.env.STRIPE_SECRET_KEY);\n\nexport default async (req, res) => {\n  const { paymentData } = req.body;\n\n  try {\n    // 1) Verify and get user id from token\n    const { userId } = jwt.verify(\n      req.headers.authorization,\n      process.env.JWT_SECRET\n    );\n    // 2) Find cart based on user id, populate it\n    const cart = await Cart.findOne({ user: userId }).populate({\n      path: \"products.product\",\n      model: \"Product\",\n      model:Product\n    });\n    // 3) Calculate cart totals again from cart products\n    const { cartTotal, stripeTotal } = calculateCartTotal(cart.products);\n    // 4) Get email from payment data, see if email linked with existing Stripe customer\n    const prevCustomer = await stripe.customers.list({\n      email: paymentData.email,\n      limit: 1\n    });\n    const isExistingCustomer = prevCustomer.data.length > 0;\n    // 5) If not existing customer, create them based on their email\n    let newCustomer;\n    if (!isExistingCustomer) {\n      newCustomer = await stripe.customers.create({\n        email: paymentData.email,\n        source: paymentData.id\n      });\n    }\n    const customer =\n      (isExistingCustomer && prevCustomer.data[0].id) || newCustomer.id;\n    // 6) Create charge with total, send receipt email\n    const charge = await stripe.charges.create(\n      {\n        currency: \"usd\",\n        amount: stripeTotal,\n        receipt_email: paymentData.email,\n        customer,\n        description: `Checkout | ${paymentData.email} | ${paymentData.id}`\n      },\n      {\n        idempotency_key: uuidv4()\n      }\n    );\n    // 7) Add order data to database\n    await new Order({\n      user: userId,\n      email: paymentData.email,\n      total: cartTotal,\n      products: cart.products\n    }).save();\n    // 8) Clear products in cart\n    await Cart.findOneAndUpdate({ _id: cart._id }, { $set: { products: [] } });\n    // 9) Send back success (200) response\n    res.status(200).send(\"Checkout successful\");\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error processing charge\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}