{"ast":null,"code":"import connectDb from \"../../utils/connectDb\";\nimport User from \"../../models/User\";\nimport Cart from \"../../models/Cart\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport isEmail from \"validator/lib/isEmail\";\nimport isLength from \"validator/lib/isLength\";\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    // 1) Validate name / email / password\n    if (!isLength(name, {\n      min: 3,\n      max: 10\n    })) {\n      return res.status(422).send(\"Name must be 3-10 characters long\");\n    } else if (!isLength(password, {\n      min: 6\n    })) {\n      return res.status(422).send(\"Password must be at least 6 characters\");\n    } else if (!isEmail(email)) {\n      return res.status(422).send(\"Email must be valid\");\n    } // 2) Check to see if the user already exists in the db\n\n\n    const user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(422).send(`User already exists with email ${email}`);\n    } // 3) --if not, hash their password\n\n\n    const hash = await bcrypt.hash(password, 10); // 4) create user\n\n    const newUser = await new User({\n      name,\n      email,\n      password: hash\n    }).save();\n    console.log({\n      newUser\n    }); // 5) create cart for new user\n\n    await new Cart({\n      user: newUser._id\n    }).save(); // 6) create token for the new user\n\n    const token = jwt.sign({\n      userId: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: \"7d\"\n    }); // 7) send back token\n\n    res.status(201).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error signing up user. Please try again later\");\n  }\n});","map":{"version":3,"sources":["C:\\Users\\Gebruiker\\Desktop\\e-commerce\\pages\\api\\signup.js"],"names":["connectDb","User","Cart","bcrypt","jwt","isEmail","isLength","req","res","name","email","password","body","min","max","status","send","user","findOne","hash","newUser","save","console","log","_id","token","sign","userId","process","env","JWT_SECRET","expiresIn","json","error"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEAN,SAAS;AAET,gBAAe,OAAOO,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA4BJ,GAAG,CAACK,IAAtC;;AACA,MAAI;AACF;AACA,QAAI,CAACN,QAAQ,CAACG,IAAD,EAAO;AAAEI,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,GAAG,EAAE;AAAf,KAAP,CAAb,EAA0C;AACxC,aAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mCAArB,CAAP;AACD,KAFD,MAEO,IAAI,CAACV,QAAQ,CAACK,QAAD,EAAW;AAAEE,MAAAA,GAAG,EAAE;AAAP,KAAX,CAAb,EAAqC;AAC1C,aAAOL,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wCAArB,CAAP;AACD,KAFM,MAEA,IAAI,CAACX,OAAO,CAACK,KAAD,CAAZ,EAAqB;AAC1B,aAAOF,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB,CAAP;AACD,KARC,CASF;;;AACA,UAAMC,IAAI,GAAG,MAAMhB,IAAI,CAACiB,OAAL,CAAa;AAAER,MAAAA;AAAF,KAAb,CAAnB;;AACA,QAAIO,IAAJ,EAAU;AACR,aAAOT,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,kCAAiCN,KAAM,EAA7D,CAAP;AACD,KAbC,CAcF;;;AACA,UAAMS,IAAI,GAAG,MAAMhB,MAAM,CAACgB,IAAP,CAAYR,QAAZ,EAAsB,EAAtB,CAAnB,CAfE,CAgBF;;AACA,UAAMS,OAAO,GAAG,MAAM,IAAInB,IAAJ,CAAS;AAC7BQ,MAAAA,IAD6B;AAE7BC,MAAAA,KAF6B;AAG7BC,MAAAA,QAAQ,EAAEQ;AAHmB,KAAT,EAInBE,IAJmB,EAAtB;AAKAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,MAAAA;AAAF,KAAZ,EAtBE,CAuBF;;AACA,UAAM,IAAIlB,IAAJ,CAAS;AAAEe,MAAAA,IAAI,EAAEG,OAAO,CAACI;AAAhB,KAAT,EAAgCH,IAAhC,EAAN,CAxBE,CAyBF;;AACA,UAAMI,KAAK,GAAGrB,GAAG,CAACsB,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAEP,OAAO,CAACI;AAAlB,KAAT,EAAkCI,OAAO,CAACC,GAAR,CAAYC,UAA9C,EAA0D;AACtEC,MAAAA,SAAS,EAAE;AAD2D,KAA1D,CAAd,CA1BE,CA6BF;;AACAvB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBiB,IAAhB,CAAqBP,KAArB;AACD,GA/BD,CA+BE,OAAOQ,KAAP,EAAc;AACdX,IAAAA,OAAO,CAACW,KAAR,CAAcA,KAAd;AACAzB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,+CAArB;AACD;AACF,CArCD","sourcesContent":["import connectDb from \"../../utils/connectDb\";\nimport User from \"../../models/User\";\nimport Cart from \"../../models/Cart\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport isEmail from \"validator/lib/isEmail\";\nimport isLength from \"validator/lib/isLength\";\n\nconnectDb();\n\nexport default async (req, res) => {\n  const { name, email, password } = req.body;\n  try {\n    // 1) Validate name / email / password\n    if (!isLength(name, { min: 3, max: 10 })) {\n      return res.status(422).send(\"Name must be 3-10 characters long\");\n    } else if (!isLength(password, { min: 6 })) {\n      return res.status(422).send(\"Password must be at least 6 characters\");\n    } else if (!isEmail(email)) {\n      return res.status(422).send(\"Email must be valid\");\n    }\n    // 2) Check to see if the user already exists in the db\n    const user = await User.findOne({ email });\n    if (user) {\n      return res.status(422).send(`User already exists with email ${email}`);\n    }\n    // 3) --if not, hash their password\n    const hash = await bcrypt.hash(password, 10);\n    // 4) create user\n    const newUser = await new User({\n      name,\n      email,\n      password: hash\n    }).save();\n    console.log({ newUser });\n    // 5) create cart for new user\n    await new Cart({ user: newUser._id }).save();\n    // 6) create token for the new user\n    const token = jwt.sign({ userId: newUser._id }, process.env.JWT_SECRET, {\n      expiresIn: \"7d\"\n    });\n    // 7) send back token\n    res.status(201).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error signing up user. Please try again later\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}